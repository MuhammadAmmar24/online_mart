# version: '3.8'
name: mart
services:


# # User Service
#   user_service:
#     build:
#       context: ./user_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./user_service:/code 
#     depends_on:
#       - postgres_user_db
#       - broker
#     ports:
#       - "8005:8000"    

# # User Database
#   postgres_user_db:
#     image: postgres:latest 
#     restart: always
#     container_name: PostgresUserCont
#     environment:
#         - POSTGRES_USER=ammar
#         - POSTGRES_PASSWORD=mypassword
#         - POSTGRES_DB=user_db
#     ports:
#         - '5435:5432'
#     volumes:
#         - postgres_user_db:/var/lib/postgresql/data



# Product Service
  product_service:
    build:
      context: ./product_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product_service:/code 
    depends_on:
      - postgres_product_db
      - broker
    ports:
      - "8006:8000"    

# Product Database
  postgres_product_db:
    image: postgres:latest 
    restart: always
    container_name: PostgresProductCont
    environment:
        - POSTGRES_USER=ammar
        - POSTGRES_PASSWORD=mypassword
        - POSTGRES_DB=product_db
    ports:
        - '5436:5432'
    volumes:
        - postgres_product_db:/var/lib/postgresql/data



# Inventory Service
  inventory_service:
    build:
      context: ./inventory_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory_service:/code 
    depends_on:
      - postgres_inventory_db
      - broker
    ports:
      - "8007:8000"    

# Inventory Database
  postgres_inventory_db:
    image: postgres:latest 
    restart: always
    container_name: PostgresInventoryCont
    environment:
        - POSTGRES_USER=ammar
        - POSTGRES_PASSWORD=mypassword
        - POSTGRES_DB=inventory_db
    ports:
        - '5437:5432'
    volumes:
        - postgres_inventory_db:/var/lib/postgresql/data



# Order Service
  order_service:
    build:
      context: ./order_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order_service:/code 
    depends_on:
      - postgres_order_db
      - broker
    ports:
      - "8008:8000"    

# Order Database
  postgres_order_db:
    image: postgres:latest 
    restart: always
    container_name: PostgresOrderCont
    environment:
        - POSTGRES_USER=ammar
        - POSTGRES_PASSWORD=mypassword
        - POSTGRES_DB=order_db
    ports:
        - '5438:5432'
    volumes:
        - postgres_order_db:/var/lib/postgresql/data



# # Payment Service
#   payment_service:
#     build:
#       context: ./payment_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./payment_service:/code 
#     depends_on:
#       - postgres_payment_db
#       - broker
#     ports:
#       - "8009:8000"    

# # Payment Database
#   postgres_payment_db:
#     image: postgres:latest 
#     restart: always
#     container_name: PostgresPaymentCont
#     environment:
#         - POSTGRES_USER=ammar
#         - POSTGRES_PASSWORD=mypassword
#         - POSTGRES_DB=payment_db
#     ports:
#         - '5439:5432'
#     volumes:
#         - postgres_payment_db:/var/lib/postgresql/data



# Notification Service
  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification_service:/code 
    depends_on:
      - postgres_notification_db
      - broker
    ports:
      - "8010:8000"    

# Notification Database
  postgres_notification_db:
    image: postgres:latest 
    restart: always
    container_name: PostgresNotificationCont
    environment:
        - POSTGRES_USER=ammar
        - POSTGRES_PASSWORD=mypassword
        - POSTGRES_DB=notification_db
    ports:
        - '5440:5432'
    volumes:
        - postgres_notification_db:/var/lib/postgresql/data



  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'      
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker


volumes:
  postgres_user_db:
    driver: local
  postgres_product_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_order_db:
    driver: local
  postgres_payment_db:  
    driver: local
  postgres_notification_db:
    driver: local
    
networks:
  default:
    driver: bridge
